<template>
  <div class="episode-list">
    <template webc:for="episode of episodes">
      <a :href="episode.url" class="episode-item">
        <span class="episode-number">Episode {{ episode.data.episode.episodeNumber }}</span>
        <span class="episode-title">{{ episode.data.title }}</span>
        <span class="episode-duration">{{ formatDuration(episode.data.episode.duration) }}</span>
      </a>
    </template>
  </div>
</template>

<style>
.episode-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  width: 100%;
}

.episode-item {
  display: grid;
  grid-template-columns: auto 1fr auto;
  gap: 1rem;
  padding: 1rem;
  color: var(--text-color);
  text-decoration: none;
  border-radius: 0.5rem;
  transition: background-color 0.2s;
  align-items: center;
}

.episode-item:hover {
  background: var(--hover-bg);
}

.episode-number {
  color: var(--text-muted);
  font-size: 0.875rem;
  font-weight: 500;
}

.episode-title {
  font-weight: 500;
  line-height: 1.4;
}

.episode-duration {
  color: var(--text-muted);
  font-size: 0.875rem;
  font-variant-numeric: tabular-nums;
}

@media (min-width: 768px) {
  .episode-list {
    flex-direction: row;
    flex-wrap: wrap;
  }

  .episode-item {
    flex: 1 1 300px;
    min-width: 300px;
  }
}
</style>

<script>
class EpisodeList extends HTMLElement {
  constructor() {
    super();
  }

  formatDuration(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  }

  static get observedAttributes() {
    return ['episodes'];
  }
}

customElements.define('episode-list', EpisodeList);
</script>