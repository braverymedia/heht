<template>
  <div class="featured-episode">
    <template webc:if="episode">
      <div class="episode-card">
        <div class="episode-header">
          <span class="episode-number">Episode {{ episode.data.episode.episodeNumber }}</span>
          <h2 class="episode-title">{{ episode.data.title }}</h2>
          <div class="episode-meta">
            <span class="episode-date">{{ episode.date | readableDate }}</span>
            <span class="episode-duration">{{ episode.data.episode.duration | formatDuration }}</span>
          </div>
        </div>

        <div class="episode-description">
          {{ episode.data.description }}
        </div>

        <div class="episode-actions">
          <a :href="episode.url" class="button primary">Listen Now</a>
          <audio-player
            :src="episode.data.episode.filename | episodeUrl(podcast)"
            :title="episode.data.title"
            :episode-number="episode.data.episode.episodeNumber"
          ></audio-player>
        </div>
      </div>
    </template>
    <template webc:else>
      <p>No episodes available yet.</p>
    </template>
  </div>
</template>

<style>
.featured-episode {
  margin: 2rem 0;
}

.episode-card {
  background: var(--surface-color);
  border-radius: 0.75rem;
  padding: 2rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
}

.episode-header {
  margin-bottom: 1.5rem;
}

.episode-number {
  display: inline-block;
  color: var(--primary-color);
  font-weight: 600;
  font-size: 0.875rem;
  margin-bottom: 0.5rem;
}

.episode-title {
  font-size: 1.75rem;
  margin: 0 0 1rem 0;
  line-height: 1.3;
}

.episode-meta {
  display: flex;
  gap: 1rem;
  color: var(--text-muted);
  font-size: 0.875rem;
}

.episode-description {
  margin-bottom: 1.5rem;
  line-height: 1.6;
}

.episode-actions {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

@media (min-width: 768px) {
  .episode-actions {
    flex-direction: row;
    align-items: center;
  }
}
</style>

<script>
class FeaturedEpisode extends HTMLElement {
  constructor() {
    super();
  }

  formatDate(date) {
    return new Date(date).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  }

  formatDuration(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  }

  static get observedAttributes() {
    return ['episode'];
  }
}

customElements.define('featured-episode', FeaturedEpisode);
</script>