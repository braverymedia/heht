<header class="toolbar">
  <nav class="site-nav" aria-label="Main navigation">
    <a href="/" class="site-logo">
      <heht-logo aria-label="HEHT"></heht-logo>
    </a>

    <div class="nav-links">
      <a href="/about/" class="nav-link">About</a>
      <button type="button"
              class="nav-link"
              aria-label="Toggle episode list"
              aria-expanded="false"
              @click="toggleMenu()">
        Episodes
      </button>
    </div>
  </nav>
  <button type="button" class="cta" aria-label="Subscribe to newsletter"
    @click="openNewsletterModal()">
    <icon-heart-envelope></icon-heart-envelope>
    Subscribe
  </button>
  <div class="mobile-menu" aria-hidden="true">
    <episode-list :episodes="JSON.stringify(parsedEpisodes)"></episode-list>
  </div>

  <div class="desktop-drawer" aria-hidden="true">
    <div class="drawer-header">
      <h2>All Episodes</h2>
    </div>
    <episode-list :episodes="JSON.stringify(parsedEpisodes)"></episode-list>
    <button type="button" class="drawer-close" aria-label="Close drawer" @click="closeDrawer()">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M18 6L6 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
        <path d="M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
      </svg>
    </button>
  </div>

  <div class="newsletter-modal" aria-hidden="true" role="dialog" aria-labelledby="newsletter-modal-title">
    <div class="modal-content">
      <div class="modal-header">
        <h2 id="newsletter-modal-title">Subscribe to our Newsletter</h2>
        <button type="button" class="modal-close" aria-label="Close modal" @click="closeNewsletterModal()">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M18 6L6 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
            <path d="M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
          </svg>
        </button>
      </div>
      <newsletter-form></newsletter-form>
    </div>
  </div>
</header>

<style>
  .site-logo {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 3rem clamp(1rem, 4vw, 3rem);
    position: sticky;
    top: 0;
    z-index: 100;
    font-size: var(--type-sm);
  }
  .site-nav {
    display: flex;
    gap: 4rem;
    .nav-links {
      display: flex;
      gap: 1.5rem;
      align-items: center;
      flex: 1 1 auto;
    }
  }
  a.nav-link,
  button.nav-link,
  .nav-link {
    text-decoration: none !important;
    color: var(--color-white) !important;
    padding: 0 !important;
    &:hover {
      color: var(--color-green) !important;
    }
    &:after {
      display: none !important;
    }
  }
</style>

<script webc:setup>
const parsedEpisodes = episodes ? JSON.parse(episodes) : [];
</script>

<script>
class SiteNav extends HTMLElement {
  constructor() {
    super();
    this.mobileMenu = null;
    this.desktopDrawer = null;
    this.menuToggle = null;
    this.newsletterModal = null;
  }

  connectedCallback() {
    this.mobileMenu = this.querySelector('.mobile-menu');
    this.desktopDrawer = this.querySelector('.desktop-drawer');
    this.menuToggle = this.querySelector('.nav-link[aria-label="Toggle episode list"]');
    this.newsletterModal = this.querySelector('.newsletter-modal');

    this.menuToggle.addEventListener('click', () => this.toggleMenu());

    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      if (!this.contains(e.target) &&
          (this.mobileMenu.getAttribute('aria-hidden') === 'false' ||
           this.desktopDrawer.getAttribute('aria-hidden') === 'false')) {
        this.closeMenu();
      }
    });

    // Close newsletter modal when clicking outside
    this.newsletterModal.addEventListener('click', (e) => {
      if (e.target === this.newsletterModal) {
        this.closeNewsletterModal();
      }
    });

    // Close newsletter modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && this.newsletterModal.getAttribute('aria-hidden') === 'false') {
        this.closeNewsletterModal();
      }
    });
  }

  toggleMenu() {
    const isMobile = window.innerWidth <= 768;
    const menu = isMobile ? this.mobileMenu : this.desktopDrawer;
    const isOpen = menu.getAttribute('aria-hidden') === 'false';

    if (isOpen) {
      this.closeMenu();
    } else {
      this.openMenu();
    }
  }

  openMenu() {
    const isMobile = window.innerWidth <= 768;
    const menu = isMobile ? this.mobileMenu : this.desktopDrawer;

    menu.setAttribute('aria-hidden', 'false');
    this.menuToggle.setAttribute('aria-expanded', 'true');

    // Prevent scrolling when menu is open
    document.body.style.overflow = 'hidden';
  }

  closeMenu() {
    const isMobile = window.innerWidth <= 768;
    const menu = isMobile ? this.mobileMenu : this.desktopDrawer;

    menu.setAttribute('aria-hidden', 'true');
    this.menuToggle.setAttribute('aria-expanded', 'false');

    // Restore scrolling
    document.body.style.overflow = '';
  }

  openNewsletterModal() {
    this.newsletterModal.setAttribute('aria-hidden', 'false');
    document.body.style.overflow = 'hidden';
  }

  closeNewsletterModal() {
    this.newsletterModal.setAttribute('aria-hidden', 'true');
    document.body.style.overflow = '';
  }

  closeDrawer() {
    this.closeMenu();
  }
}

customElements.define('site-nav', SiteNav);
</script>