---
layout: layouts/base.webc
permalink: "/episodes/{{ episode.episodeNumber | padStart(3, '0') }}-{{ title | slugify }}/"
---
<article class="episode h-entry" itemscope itemtype="http://schema.org/PodcastEpisode">
  <header class="episode-header">
    <div class="episode-meta">
      <time class="dt-published" :datetime="date | htmlDateString" itemprop="datePublished" @text="date | readableDate"></time>
      <span class="episode-number" @text="`Episode ${episode.episodeNumber | padStart(3, '0')}`"></span>
      <template webc:if="episode.duration">
        <span class="episode-duration" itemprop="timeRequired" @text="episode.duration | formatDuration"></span>
      </template>
    </div>

    <h1 class="p-name" itemprop="name" @text="title"></h1>

    <template webc:if="description">
      <p class="p-summary" itemprop="description" @text="description"></p>
    </template>
  </header>

  <div class="episode-player">
    <audio-player
      :src="episode.filename | episodeUrl(podcast)"
      :title="title"
      :episode="episode.episodeNumber | padStart(3, '0')"
      :duration="episode.duration | formatDuration"
    ></audio-player>
  </div>

  <div class="episode-content e-content" itemprop="articleBody">
    <slot></slot>
  </div>

  <template webc:if="shownotes">
    <section class="episode-notes">
      <h2>Show Notes</h2>
      <div webc:raw="shownotes | markdownify | safe"></div>
    </section>
  </template>

  <footer class="episode-footer">

    <template webc:if="transcript">
      <div class="episode-transcript">
        <h2>Transcript</h2>
        <div webc:raw="transcript | markdownify | safe"></div>
      </div>
    </template>
  </footer>
</article>

<script type="application/ld+json" webc:keep>
{
  "@context": "https://schema.org",
  "@type": "PodcastEpisode",
  "name": "{{ title }}",
  "datePublished": "{{ date | htmlDateString }}",
  "description": "{{ description }}",
  "duration": "{{ formatDuration(episode.duration) }}",
  "episodeNumber": "{{ episode.episodeNumber }}",
  "url": "{{ url | absoluteUrl(podcast.siteUrl) }}",
  "partOfSeries": {
    "@type": "PodcastSeries",
    "name": "{{ podcast.title }}",
    "url": "{{ podcast.siteUrl }}"
  }
}
</script>

<style>
.episode {
  max-width: var(--max-width);
  margin: 0 auto;
  padding: 2rem 1rem;
}

.episode-header {
  margin-bottom: 2rem;
}

.episode-meta {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  color: var(--text-muted);
  font-size: 0.875rem;
  margin-bottom: 1rem;
}

.episode-number {
  font-weight: 500;
}

.episode-duration {
  font-variant-numeric: tabular-nums;
}

.episode-header h1 {
  font-size: 2.5rem;
  line-height: 1.2;
  margin-bottom: 1rem;
}

.episode-header p {
  font-size: 1.25rem;
  line-height: 1.6;
  color: var(--text-muted);
}

.episode-player {
  margin: 2rem 0;
}

.episode-content {
  font-size: 1.125rem;
  line-height: 1.7;
}

.episode-content h2 {
  font-size: 1.75rem;
  margin: 2rem 0 1rem;
}

.episode-content h3 {
  font-size: 1.5rem;
  margin: 1.5rem 0 1rem;
}

.episode-content ul,
.episode-content ol {
  margin: 1rem 0;
  padding-left: 1.5rem;
}

.episode-content li {
  margin-bottom: 0.5rem;
}

.episode-content a {
  color: var(--primary-color);
  text-decoration: none;
}

.episode-content a:hover {
  text-decoration: underline;
}

.episode-notes,
.episode-transcript {
  margin-top: 3rem;
  padding-top: 2rem;
  border-top: 1px solid var(--border-color);
}

.episode-notes h2,
.episode-transcript h2 {
  font-size: 1.75rem;
  margin-bottom: 1.5rem;
}

.episode-footer {
  margin-top: 3rem;
  padding-top: 2rem;
  border-top: 1px solid var(--border-color);
}

.episode-share h2 {
  font-size: 1.5rem;
  margin-bottom: 1rem;
}

@media (max-width: 768px) {
  .episode-header h1 {
    font-size: 2rem;
  }

  .episode-content {
    font-size: 1rem;
  }
}
</style>

<script>
class EpisodeLayout extends HTMLElement {
  constructor() {
    super();
  }

  formatDuration(seconds) {
    if (!seconds) return "00:00";
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  }
}

customElements.define('episode-layout', EpisodeLayout);
</script>